{"version":3,"sources":["components/Button.tsx","consts.ts","components/Audio.tsx","components/svg/CloseSvg.tsx","components/svg/PlaySvg.tsx","components/svg/PauseSvg.tsx","components/svg/SoundOnSvg.tsx","components/svg/SoundOffSvg.tsx","components/svg/InfoSvg.tsx","components/AudioButton.tsx","components/BgImage.tsx","components/Container.tsx","components/CircleGrow.tsx","components/Modal.tsx","components/Tab.tsx","components/PlayerControls.tsx","context/CountdownContext.tsx","logics/useCurrentWidth.ts","context/TimerContext.tsx","utils/TimeFormat.ts","components/TabsGroup.tsx","components/OrderedList.tsx","Main.tsx","logics/useScoreTimer.ts","logics/useAudioPlayer.ts","logics/useCountdownOverlay.ts","index.tsx"],"names":["ETheme","Audio","props","src","Path","audioFile","id","onClick","toggleMusic","CloseSvg","xmlns","width","svgWidth","height","svgHeight","viewBox","fill","fillColor","d","PlaySvg","bgFillColor","PauseSvg","enableBackground","version","xmlSpace","SoundOnSvg","SoundOffSvg","InfoSvg","x","y","AudioButton","isPlaying","className","BgImage","style","backgroundImage","imageUrl","children","Container","centered","isCentered","centeredX","isCenteredX","maxWidth","CircleGrow","animatedClass","animatedStep","playingStep","Fragment","animationPlayState","playingState","borderColor","Modal","isModal","backgroundColor","isOverlay","onCloseBtnClick","Tab","borderBottomStyle","isActive","toogleTab","PlayerControls","play","audioProps","reset","pause","audio","CountdownContext","createContext","countdownSeconds","setCountdownSeconds","undefined","countdownOverlaySeconds","setCountdownOverlaySeconds","countdownMinutes","setCountdownMinutes","CountdownProvider","useState","Provider","value","getWidth","window","innerWidth","document","documentElement","clientWidth","body","TimerContext","seconds","setSeconds","minutes","setMinutes","TimerProvider","TimeFormat","displaySeconds","displayMinutes","numberTimeFormat","string","pad","length","Array","join","slice","Math","floor","TabsGroup","noTabsonDesktop","isCard","contents","idActive","setIdActive","activeTabs","setActiveTabs","setWidth","useEffect","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","useCurrentWidth","navigation","map","idx","title","setActive","content","subcontent","returnedContent","isArray","background","OrderedList","list","lists","color","Main","timeActive","setTimeActive","setIsModal","chronoStep","stepSeconds","stepName","stepColor","step","setStep","milliseconds","useContext","timerInterval","setInterval","clearInterval","secondsFormat","useScoreTimer","audioPlaying","setAudioPlaying","resetAudio","setResetAudio","musicPlaying","setMusicPlaying","resetMusic","setResetMusic","getElementById","music","currentTime","useAudioPlayer","active","useCountdownOverlay","changeDataCountdown","setChangeDataCountdown","setPlay","animationState","setAnimationState","role","aria-live","count","res","ceil","displayCount","App","ReactDom","render"],"mappings":"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","file":"static/js/main.088d2cbc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport enum ETheme{\r\n    DARK = 'dark',\r\n    LIGHT = 'light'\r\n}\r\n\r\ntype ButtonProps = {\r\n    isActive?: boolean;\r\n    theme: ETheme;\r\n    onClick?: () => void;\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, theme, isActive, onClick }: React.PropsWithChildren<ButtonProps>) => (\r\n    <button\r\n        className={`Button -${theme} ${isActive ? '-active' : ''}`\r\n        }\r\n        onClick={onClick}>\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default Button;\r\n","export const imgPath: string = './assets/img/';\r\nexport const audioPath: string = './assets/audio/';\r\n\r\nexport default { imgPath, audioPath };\r\n","import React from \"react\";\r\n\r\nimport Path from '../consts'\r\n\r\ntype AudioProps = {\r\n    audioFile:string;\r\n    id:string;\r\n    toggleMusic?:(event: any) => void;\r\n}\r\n\r\nconst Audio:React.FC<AudioProps> = (props: React.PropsWithChildren<AudioProps>) => {\r\n  return (\r\n      <audio src={`${Path.audioPath}${props.audioFile}`} id={props.id} onClick={props.toggleMusic && props.toggleMusic}></audio>\r\n  );\r\n}\r\n\r\nexport default Audio;\r\n","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst CloseSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" \r\n            width={props.svgWidth}\r\n            height={props.svgHeight && props.svgHeight}\r\n            viewBox=\"0 0 25 25\">\r\n            <path fill={props.fillColor ? props.fillColor : '#fff'} d=\"M24.7.3c-.4-.4-1-.4-1.4 0l-23 23c-.4.4-.4 1 0 1.4.2.2.5.3.7.3s.5-.1.7-.3l23-23c.4-.4.4-1 0-1.4z\"></path>\r\n            <path fill={props.fillColor ? props.fillColor : '#fff'} d=\"M24.7 23.3L1.7.3C1.3-.1.7-.1.3.3s-.4 1 0 1.4l23 23c.2.2.5.3.7.3.3 0 .5-.1.7-.3.4-.4.4-1 0-1.4z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default CloseSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst PlaySvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.svgWidth}\r\n        height={props.svgHeight && props.svgHeight}\r\n        viewBox=\"0 0 494.942 494.942\"\r\n        >\r\n        <path fill={props.bgFillColor ? props.bgFillColor : '#007d8f'} \r\n            d=\"M35.353 0l424.236 247.471L35.353 494.942z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default PlaySvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst PauseSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.svgWidth}\r\n        height={props.svgHeight && props.svgHeight}\r\n        enableBackground=\"new 0 0 298.667 298.667\"\r\n        version=\"1.1\"\r\n        viewBox=\"0 0 298.667 298.667\"\r\n        xmlSpace=\"preserve\"\r\n        >\r\n        <path fill={props.bgFillColor ? props.bgFillColor : '#007d8f'} \r\n        d=\"M192 0H277.33299999999997V298.667H192z\"></path>\r\n        <path fill={props.bgFillColor ? props.bgFillColor : '#007d8f'} \r\n        d=\"M21.333 0H106.666V298.667H21.333z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default PauseSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst SoundOnSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n        <svg \r\n        width={props.svgWidth}\r\n        // height={props.svgWidth}\r\n        viewBox=\"-5 -6 40 40\">\r\n        <path fill={props.fillColor ? props.fillColor : \"#007d8f\"} \r\n            d=\"M12.618 0a8.343 8.343 0 00-4.032 1.035 8.365 8.365 0 00-3.034 2.856h-3.2a2.355 2.355 0 00-1.663.692A2.362 2.362 0 000 6.249v4.275a2.36 2.36 0 002.354 2.358h3.2a8.343 8.343 0 007.066 3.89.599.599 0 00.605-.606V.604A.607.607 0 0012.618 0zm-7.33 11.675H2.354a1.147 1.147 0 01-1.148-1.15V6.249A1.152 1.152 0 012.354 5.1h2.934v6.576zm6.727 3.868a7.188 7.188 0 01-5.52-3.428v-7.45a7.207 7.207 0 015.52-3.429v14.307zm3.567-11.836a.604.604 0 00-.916.606.607.607 0 00.224.387 4.497 4.497 0 011.925 3.693 4.508 4.508 0 01-1.925 3.693.607.607 0 00.236 1.092.604.604 0 00.452-.098 5.705 5.705 0 002.442-4.686 5.72 5.72 0 00-2.442-4.687h.004z\"></path>\r\n        <path fill={props.fillColor ? props.fillColor : \"#007d8f\"}\r\n            d=\"M17.915 1.204a.604.604 0 00-.967.605.607.607 0 00.281.392 7.537 7.537 0 013.228 6.19 7.555 7.555 0 01-3.228 6.192.607.607 0 00-.152.842.605.605 0 00.84.152 8.766 8.766 0 000-14.37l-.002-.003z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default SoundOnSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst SoundOffSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n        <svg \r\n        width={props.svgWidth}\r\n        height={props.svgWidth} \r\n        viewBox=\"-5 -6 40 40\">\r\n        <path fill={props.fillColor ? props.fillColor : \"#007d8f\"} d=\"M0 .756L20.432 17l.568-.756L.568 0 .001.756H0z\"></path>\r\n        <path fill={props.fillColor ? props.fillColor : \"#007d8f\"} d=\"M12.618 0a8.343 8.343 0 00-4.032 1.035 8.365 8.365 0 00-3.034 2.856h-3.2a2.355 2.355 0 00-1.663.692A2.362 2.362 0 000 6.249v4.275a2.36 2.36 0 002.354 2.358h3.2a8.343 8.343 0 007.066 3.89.599.599 0 00.605-.606V.604A.607.607 0 0012.618 0zm-7.33 11.675H2.354a1.147 1.147 0 01-1.148-1.15V6.249A1.152 1.152 0 012.354 5.1h2.934v6.576zm6.727 3.868a7.188 7.188 0 01-5.52-3.428v-7.45a7.207 7.207 0 015.52-3.429v14.307zm3.567-11.836a.604.604 0 00-.916.606.607.607 0 00.224.387 4.497 4.497 0 011.925 3.693 4.508 4.508 0 01-1.925 3.693.607.607 0 00.236 1.092.604.604 0 00.452-.098 5.705 5.705 0 002.442-4.686 5.72 5.72 0 00-2.442-4.687h.004z\"></path>\r\n        <path fill={props.fillColor ? props.fillColor : \"#007d8f\"} d=\"M17.915 1.204a.604.604 0 00-.967.605.607.607 0 00.281.392 7.537 7.537 0 013.228 6.19 7.555 7.555 0 01-3.228 6.192.607.607 0 00-.152.842.605.605 0 00.84.152 8.766 8.766 0 000-14.37l-.002-.003z\"></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default SoundOffSvg;","import React from 'react'\r\nimport svgType from '../../type/svgType';\r\n\r\nconst InfoSvg:React.FC<svgType> = (props: React.PropsWithChildren<svgType>) =>{\r\n\r\n    return(\r\n        <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.svgWidth}\r\n        height={props.svgHeight}\r\n        x=\"0\"\r\n        y=\"0\"\r\n        enableBackground=\"new 0 0 25 25\"\r\n        viewBox=\"0 0 25 25\"\r\n        >\r\n        <path\r\n            fill={props.fillColor ? props.fillColor : \"#846700\"}\r\n            d=\"M12.5 0C5.6 0 0 5.6 0 12.5S5.6 25 12.5 25 25 19.4 25 12.5 19.4 0 12.5 0zm-.4 6.7c0-1 .8-1.7 1.7-1.7.7 0 1.3.5 1.3 1.2v.2c0 1-.8 1.8-1.7 1.8-.7 0-1.3-.5-1.3-1.1v-.4zm-1 12.4c-.7 0-1.2-.5-.7-2.5l.8-3.6c.1-.6.2-.8 0-.8-.6.2-1.1.4-1.6.8l-.3-.6c1.2-1.2 2.8-2.1 4.4-2.4.7 0 .8.9.5 2.3l-.9 3.8c-.2.7-.1.9.1.9.6-.1 1.1-.4 1.6-.9l.4.6c-1.2 1.2-2.7 2-4.3 2.4z\"\r\n        ></path>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default InfoSvg;","import React from 'react';\r\nimport { SoundOnSvg, SoundOffSvg } from './svg';\r\nimport Audio from './Audio';\r\n\r\ntype AudioButtonProps = {\r\n    id: string;\r\n    audioFile: string;\r\n    isPlaying?: boolean | undefined;\r\n    toggleMusic?: (event: any) => void;\r\n};\r\n\r\nconst AudioButton: React.FC<AudioButtonProps> = ({ toggleMusic, isPlaying, audioFile, id }) => (\r\n    <button\r\n        className=\"_bg-white _rounded-rounded _w-xxl _h-xxl _border-none _p-xs _cursor-pointer _outline-none\"\r\n        onClick={toggleMusic && toggleMusic}>\r\n        {isPlaying === false && <SoundOffSvg svgWidth=\"40\"></SoundOffSvg>}\r\n        {isPlaying === true && <SoundOnSvg svgWidth=\"40\"></SoundOnSvg>}\r\n        <Audio id={id} audioFile={audioFile}></Audio>\r\n    </button>\r\n);\r\n\r\nexport default AudioButton;\r\n","import React from 'react'\r\n\r\ntype PropsBgImage = {\r\n    imageUrl:string;\r\n\r\n}\r\n\r\nconst BgImage:React.FC<PropsBgImage> = (props: React.PropsWithChildren<PropsBgImage>) => {\r\n    return (\r\n        <div className={`_bg-cover _h-screen _overflow-auto`} style={{backgroundImage: `url(${props.imageUrl})`}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BgImage;","import React from 'react'\r\n\r\ntype ContainerProps = {\r\n    maxWidth:string;\r\n    isCentered?:boolean;\r\n    isCenteredX?:boolean;\r\n\r\n}\r\n\r\nconst Container:React.FC<ContainerProps> = (props: React.PropsWithChildren<ContainerProps>) => {\r\n\r\n    const centered = props.isCentered ? '_m-auto' : '';\r\n    const centeredX = props.isCenteredX ? '_mx-auto' : '';\r\n    \r\n    return(\r\n        <section className={`${centered} ${centeredX}`} style={{maxWidth:props.maxWidth}}>\r\n            {props.children}\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\nexport default Container; ","import React from 'react';\r\n\r\ntype CircleGrowProps = {\r\n    isPlaying?: boolean;\r\n    playingStep?: number;\r\n    borderColor?: string;\r\n    activeClass?: string;\r\n    playingState?: string;\r\n};\r\n\r\nconst CircleGrow: React.FC<CircleGrowProps> = (props: React.PropsWithChildren<CircleGrowProps>) => {\r\n    const animatedClass = props.isPlaying === true || props.isPlaying === false ? 'is-animated' : '';\r\n    const animatedStep =\r\n        props.playingStep && props.playingStep === 2 ? props.playingStep + ' is-played' : props.playingStep;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                className={`box-circle _absolute _bg-white _rounded-circle _flex _items-center _justify-center ${animatedClass}${animatedStep}`}\r\n                style={{ animationPlayState: `${props.playingState}` }}></div>\r\n            <div\r\n                className={`circle-overlay _absolute _rounded-circle _border-${props.borderColor &&\r\n                    props.borderColor} _border-3 _border-solid`}></div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CircleGrow;\r\n","import React from 'react';\r\n\r\nimport { CloseSvg } from '../components/svg';\r\n\r\ntype ModalProps = {\r\n    onCloseBtnClick?: (event: any) => void;\r\n    count?: number | string;\r\n    isIcon?: boolean;\r\n    iconPosition?: string;\r\n    title?: string;\r\n    bgColor?: string;\r\n    isModal: boolean;\r\n    isOverlay?:boolean;\r\n};\r\n\r\nconst Modal: React.FC<ModalProps> = (props: React.PropsWithChildren<ModalProps>) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {props.isModal === true && (\r\n                <div className=\"_fixed  _top-0 _bottom-0 _left-0 _right-0 _z-50 _w-full _h-full _justify-center _items-center _flex\" \r\n                style={{backgroundColor:`${props.isOverlay === true ? \"rgba(0,0,0,.8)\" : \"transparent\"}`}}>\r\n                    <button className=\"_absolute _top-0 _right-0 _m-sm\" onClick={props.onCloseBtnClick && props.onCloseBtnClick}><CloseSvg svgWidth=\"25px\"></CloseSvg></button>\r\n                    <div className=\"_flex-col _flex _justify-center _items-center _absolute _h-auto _p-sm\">\r\n                        {props.children}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\ntype TabProps = {\r\n    isActive?: boolean;\r\n    toogleTab?: (event: any) => void;\r\n    borderBottomStyle?: boolean;\r\n};\r\n\r\nconst Tab: React.FC<TabProps> = (props: React.PropsWithChildren<TabProps>) => {\r\n    const tabStyle = () => {\r\n        if (props.borderBottomStyle) {\r\n            return (\r\n                <ul className=\"_w-full _justify-around _flex _cursor-pointer _m-none _px-sm _pt-sm\">\r\n                    <li\r\n                        className={`${\r\n                            props.isActive && props.isActive\r\n                                ? '_border-0 _text-primary _border-b-2 _border-solid _border-primary'\r\n                                : ''\r\n                        } _text-primary _flex _justify-center _w-full _p-xxs`}\r\n                        onClick={props.toogleTab && props.toogleTab}>\r\n                        {props.children}\r\n                    </li>\r\n                </ul>\r\n            );\r\n        } else {\r\n            return (\r\n                <ul className=\"_w-full _p-none _border _border-solid _border-primary _mt-md  _justify-around _hidden lg:_flex _cursor-pointer\">\r\n                    <li\r\n                        className={`${\r\n                            props.isActive && props.isActive ? '_text-white _bg-primary' : ''\r\n                        } _text-primary _flex _justify-center _w-full _p-xxs`}\r\n                        onClick={props.toogleTab && props.toogleTab}>\r\n                        {props.children}\r\n                    </li>\r\n                </ul>\r\n            );\r\n        }\r\n    };\r\n\r\n    return tabStyle();\r\n};\r\n\r\nexport default Tab;\r\n","import React from 'react';\r\nimport { AudioButton } from '.';\r\nimport { PauseSvg, PlaySvg } from './svg';\r\n\r\ntype ClickPlayerControls = {\r\n    reset: () => any;\r\n    pause: () => any;\r\n    audio: () => any;\r\n};\r\n\r\ninterface PlayerControlsProps {\r\n    play: boolean | undefined;\r\n    onClick: ClickPlayerControls;\r\n    isPlaying: boolean | undefined;\r\n    audioFile: string;\r\n}\r\n\r\nconst PlayerControls: React.FC<PlayerControlsProps> = ({ play, onClick, ...audioProps }) => (\r\n    <div className=\"_mt-sm _mb-lg _w-full _flex _justify-center _items-center\">\r\n        <button\r\n            className=\"_bg-white _rounded-rounded _w-xxl _h-xxl _border-none _p-xs _cursor-pointer _outline-none _flex _items-center _justify-center\"\r\n            onClick={onClick.reset}>\r\n            <div className=\"_w-sm _h-sm _bg-warning\"></div>\r\n        </button>\r\n        <button\r\n            className=\"_bg-white _rounded-rounded _w-xxxl _h-xxxl _border-none _cursor-pointer _outline-none _mx-sm _p-none\"\r\n            onClick={onClick.pause}>\r\n            <div className=\"_flex _items-center _justify-center \">\r\n                {play ? (\r\n                    <PauseSvg svgWidth=\"25px\"></PauseSvg>\r\n                ) : (\r\n                    <div className=\"_ml-xxs _flex\">\r\n                        <PlaySvg svgWidth=\"25px\"></PlaySvg>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </button>\r\n        <AudioButton id={'music'} {...audioProps} toggleMusic={onClick.audio}></AudioButton>\r\n    </div>\r\n);\r\n\r\nexport default PlayerControls;\r\n","import React, { createContext, useState } from 'react';\r\n// @ts-ignore\r\n\r\nexport type CountdownContextType = {\r\n    countdownSeconds: number;\r\n    setCountdownSeconds: React.Dispatch<React.SetStateAction<number>> | any;\r\n    countdownOverlaySeconds: number;\r\n    setCountdownOverlaySeconds: React.Dispatch<React.SetStateAction<number>> | any;\r\n    countdownMinutes: number;\r\n    setCountdownMinutes: React.Dispatch<React.SetStateAction<number>> | any;\r\n};\r\n\r\nexport const CountdownContext = createContext<CountdownContextType>({\r\n    countdownSeconds: 0,\r\n    setCountdownSeconds: undefined,\r\n    countdownOverlaySeconds: 0,\r\n    setCountdownOverlaySeconds: undefined,\r\n    countdownMinutes: 0,\r\n    setCountdownMinutes: undefined,\r\n});\r\n\r\nexport const CountdownProvider = ({ children }) => {\r\n    const [countdownSeconds, setCountdownSeconds] = useState<number>(0);\r\n    const [countdownOverlaySeconds, setCountdownOverlaySeconds] = useState<number>(0);\r\n    const [countdownMinutes, setCountdownMinutes] = useState<number>(0);\r\n\r\n    return (\r\n        <CountdownContext.Provider\r\n            value={{\r\n                countdownSeconds,\r\n                setCountdownSeconds,\r\n                countdownOverlaySeconds,\r\n                setCountdownOverlaySeconds,\r\n                countdownMinutes,\r\n                setCountdownMinutes,\r\n            }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    );\r\n};\r\n\r\nexport default CountdownContext;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst getWidth = () =>\r\n    window.innerWidth ||\r\n    document.documentElement.clientWidth ||\r\n    document.body.clientWidth;\r\n\r\nexport default function useCurrentWitdh() {\r\n    // save current window width in the state object\r\n    let [width, setWidth] = useState(getWidth());\r\n\r\n    // in this case useEffect will execute only once because\r\n    // it does not have any dependencies.\r\n    useEffect(() => {\r\n        // timeoutId for debounce mechanism\r\n        let timeoutId: any;\r\n        const resizeListener = () => {\r\n            // prevent execution of previous setTimeout\r\n            clearTimeout(timeoutId);\r\n            // change width from the state object after 150 milliseconds\r\n            timeoutId = setTimeout(() => setWidth(getWidth()), 150);\r\n        };\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n\r\n        // clean up function\r\n        return () => {\r\n            // remove resize listener\r\n            window.removeEventListener('resize', resizeListener);\r\n        };\r\n    }, []);\r\n\r\n    return width;\r\n}\r\n","import React, { createContext, useState } from 'react';\r\n\r\nexport type TimeContextType = {\r\n    seconds: number;\r\n    setSeconds: React.Dispatch<React.SetStateAction<number>> | any;\r\n    minutes: number;\r\n    setMinutes: React.Dispatch<React.SetStateAction<number>> | any;\r\n};\r\n\r\nexport const TimerContext = createContext<TimeContextType>({\r\n    seconds: 0,\r\n    setSeconds: undefined,\r\n    minutes: 0,\r\n    setMinutes: undefined,\r\n});\r\n\r\nexport const TimerProvider = ({ children }) => {\r\n    const [seconds, setSeconds] = useState<number>(0);\r\n    const [minutes, setMinutes] = useState<number>(0);\r\n\r\n    return (\r\n        <TimerContext.Provider value={{ seconds, setSeconds, minutes, setMinutes }}>{children}</TimerContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TimerContext;\r\n","export default function TimeFormat(seconds: number) {\r\n    let displaySeconds: number;\r\n    let displayMinutes: number;\r\n\r\n    function numberTimeFormat(string, pad, length) {\r\n        return (new Array(length + 1).join(pad) + string).slice(-length);\r\n    }\r\n\r\n    displayMinutes = Math.floor(seconds / 60);\r\n    displaySeconds = seconds - displayMinutes * 60;\r\n\r\n    let finalTime =\r\n        numberTimeFormat(displayMinutes, '0', 2) +\r\n        ':' +\r\n        numberTimeFormat(displaySeconds, '0', 2);\r\n\r\n    return finalTime;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Tab } from '.';\r\nimport { useCurrentWidth } from '../logics';\r\n\r\ntype SubContentType = {\r\n    title?: string;\r\n    content: string | React.ReactElement;\r\n};\r\n\r\ntype TabsGroupContent = {\r\n    title: string;\r\n    subcontent: string | SubContentType[] | React.ReactElement;\r\n};\r\n\r\ninterface TabsGroupProps {\r\n    noTabsonDesktop?: boolean;\r\n    borderBottomStyle?: boolean;\r\n    isCard?: boolean;\r\n    contents: TabsGroupContent[];\r\n}\r\n\r\nconst TabsGroup: React.FC<TabsGroupProps> = ({\r\n    noTabsonDesktop,\r\n    borderBottomStyle,\r\n    isCard,\r\n    contents,\r\n}) => {\r\n    const [idActive, setIdActive] = useState<number>(0);\r\n    const [activeTabs, setActiveTabs] = useState<boolean>(false);\r\n\r\n    let width = useCurrentWidth();\r\n    useEffect(() => {\r\n        width > 991 ? setActiveTabs(true) : setActiveTabs(false);\r\n    }, [width]);\r\n\r\n    const setActive = (idx: number): void => setIdActive(idx);\r\n\r\n    const navigation = contents.map(({ title }, idx) => (\r\n        <Tab\r\n            key={idx}\r\n            isActive={idActive === idx}\r\n            borderBottomStyle={borderBottomStyle}\r\n            toogleTab={() => setActive(idx)}>\r\n            <span className=\"_uppercase _text-center\">{title}</span>\r\n        </Tab>\r\n    ));\r\n\r\n    const content = contents.map(({ subcontent }, idx) => {\r\n        let returnedContent = Array.isArray(subcontent)\r\n            ? subcontent.map(({ title, content }, idx) => (\r\n                  <React.Fragment key={idx}>\r\n                      {title && (\r\n                          <h3 className=\"_mb-none _mt-sm _text-primary _text-lg _font-normal\">\r\n                              {title}\r\n                          </h3>\r\n                      )}\r\n                      {content}\r\n                  </React.Fragment>\r\n              ))\r\n            : subcontent;\r\n\r\n        if (noTabsonDesktop) {\r\n            if (activeTabs) {\r\n                return (\r\n                    <div key={idx} className={'_block lg:_hidden _w-full'}>\r\n                        {subcontent}\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div\r\n                        key={idx}\r\n                        className={`${\r\n                            idActive === idx ? '_block _w-full' : '_hidden'\r\n                        }`}>\r\n                        {returnedContent}\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            return (\r\n                <div\r\n                    key={idx}\r\n                    className={`${\r\n                        idActive === idx ? '_block _w-full' : '_hidden'\r\n                    }`}>\r\n                    {returnedContent}\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n\r\n    const background = isCard\r\n        ? '_bg-white _rounded-small _p-xs'\r\n        : '_bg-transparent';\r\n\r\n    return (\r\n        <section className={`${background}`}>\r\n            <nav\r\n                className={`_flex ${\r\n                    activeTabs ? '_block lg:_hidden _mb-xs' : '_block _mb-xs'\r\n                } `}>\r\n                {navigation}\r\n            </nav>\r\n            <section className=\"_flex _w-full _justify-center\">\r\n                {content}\r\n            </section>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TabsGroup;\r\n","import React from 'react';\r\n\r\ntype OrderedListContent = {\r\n    color?: string;\r\n    content: string;\r\n};\r\n\r\ninterface OrderedListProps {\r\n    lists: OrderedListContent[];\r\n}\r\n\r\nconst OrderedList: React.FC<OrderedListProps> = ({ lists }) => {\r\n    const list = lists.map(({ color, content }, idx) => (\r\n        <li className=\"_flex _p-sm\" key={idx}>\r\n            <span\r\n                className={`_mr-sm _w-lg _rounded-rounded _text-white _leading-loose _text-center _min-w-lg _max-h-lg ${color ? `_bg-${color}` : '_bg-primary'}`}>\r\n                {idx + 1}\r\n            </span>\r\n            <p className=\"_m-none\">{content}</p>\r\n        </li>\r\n    ));\r\n\r\n    return <ol className=\"_m-none _list-none _p-none\">{list}</ol>;\r\n};\r\n\r\nexport default OrderedList;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { Path } from './config';\r\nimport {\r\n    Audio,\r\n    PlayerControls,\r\n    CircleGrow,\r\n    Container,\r\n    BgImage,\r\n    Modal,\r\n    TabsGroup,\r\n    OrderedList,\r\n} from './components';\r\nimport { InfoSvg } from './components/svg';\r\nimport chronoType from './type/chronoType';\r\nimport './styles/index.scss';\r\nimport {\r\n    useCountdownOverlay,\r\n    useAudioPlayer,\r\n    useScoreTimer,\r\n} from './logics';\r\nimport {\r\n    CountdownContext,\r\n    TimerContext,\r\n} from './context';\r\n\r\nconst Main = () => {\r\n    const [timeActive, setTimeActive] = useState<boolean>(false);\r\n    const [isModal, setIsModal] = useState<boolean>(false);\r\n\r\n    const chronoStep: chronoType = {\r\n        stepSeconds: [40, 70, 80],\r\n        stepName: ['Inspirez', 'Retenez', 'Expirez'],\r\n        stepColor: ['primary', 'warning', 'golden'],\r\n    };\r\n\r\n    let [step, setStep] = useState<number>(0);\r\n\r\n    const { seconds } = useScoreTimer(timeActive, 100);\r\n    const { setSeconds } = useContext(TimerContext);\r\n\r\n    const { musicPlaying, setMusicPlaying, setResetMusic } = useAudioPlayer();\r\n\r\n    const { countdownOverlaySeconds } = useCountdownOverlay(isModal);\r\n    const { setCountdownOverlaySeconds } = useContext(CountdownContext);\r\n\r\n    // CHRONO\r\n    const [changeDataCountdown, setChangeDataCountdown] = useState<boolean>(\r\n        false\r\n    );\r\n\r\n    const [play, setPlay] = useState<any>(null);\r\n    const [animationState, setAnimationState] = useState<string>('paused');\r\n\r\n    useEffect(() => {\r\n        // console.log(typeof seconds);\r\n        // console.log(typeof chronoStep.stepSeconds[0]);\r\n        if (timeActive === true) {\r\n            if (seconds > chronoStep.stepSeconds[step]) {\r\n                setStep(step + 1);\r\n                setSeconds(1);\r\n            }\r\n            if (step === 2 && seconds > chronoStep.stepSeconds[step]) {\r\n                setStep(0);\r\n                setSeconds(1);\r\n            }\r\n        } else {\r\n            setSeconds(1);\r\n        }\r\n    }, [seconds]);\r\n\r\n    useEffect(() => {\r\n        if (play === true) {\r\n            setIsModal(true);\r\n            if (isModal && countdownOverlaySeconds === 0) {\r\n                setAnimationState('running');\r\n                setIsModal(false);\r\n                setChangeDataCountdown(true);\r\n                setTimeActive(!timeActive);\r\n            }\r\n        }\r\n    }, [play, countdownOverlaySeconds]);\r\n\r\n    useEffect(() => {\r\n        if (play === false) {\r\n            setAnimationState('paused');\r\n            setTimeActive(!timeActive);\r\n        }\r\n    }, [play]);\r\n\r\n    function displayCount(count) {\r\n        let res = count / 10;\r\n        return Math.ceil(res);\r\n    }\r\n\r\n    function reset() {\r\n        setPlay(null);\r\n        setStep(0);\r\n        setSeconds(1);\r\n        setTimeActive(false);\r\n        setAnimationState('paused');\r\n        setResetMusic(true);\r\n        setMusicPlaying(false);\r\n        setChangeDataCountdown(false);\r\n    }\r\n\r\n    return (\r\n        <BgImage imageUrl={`${Path.imgPath}hero.jpg`}>\r\n            <Container maxWidth=\"991px\" isCenteredX>\r\n                <div className=\"_px-sm\">\r\n                    <TabsGroup\r\n                        noTabsonDesktop={true}\r\n                        contents={[\r\n                            {\r\n                                title: 'Option',\r\n                                subcontent: (\r\n                                    <aside className=\"_my-md\">\r\n                                        <TabsGroup\r\n                                            borderBottomStyle={true}\r\n                                            isCard={true}\r\n                                            contents={[\r\n                                                {\r\n                                                    title: 'étapes',\r\n                                                    subcontent: [\r\n                                                        {\r\n                                                            content: (\r\n                                                                <OrderedList\r\n                                                                    lists={[\r\n                                                                        {\r\n                                                                            color:\r\n                                                                                chronoStep.stepColor &&\r\n                                                                                chronoStep\r\n                                                                                    .stepColor[0],\r\n                                                                            content: `Fermez la bouche et inspirez tranquillement par le nez en comptant jusqu'à 4.`,\r\n                                                                        },\r\n                                                                        {\r\n                                                                            color:\r\n                                                                                chronoStep.stepColor &&\r\n                                                                                chronoStep\r\n                                                                                    .stepColor[1],\r\n                                                                            content: `Retenez votre souffle en comptant jusqu'à 7.`,\r\n                                                                        },\r\n                                                                        {\r\n                                                                            color:\r\n                                                                                chronoStep.stepColor &&\r\n                                                                                chronoStep\r\n                                                                                    .stepColor[2],\r\n                                                                            content: `Expirez bruyamment par la bouche en comptant jusqu'à 8 et en faisant le son \"whoosh\".`,\r\n                                                                        },\r\n                                                                    ]}\r\n                                                                />\r\n                                                            ),\r\n                                                        },\r\n                                                        {\r\n                                                            title:\r\n                                                                'Avant de commencer',\r\n                                                            content: `Fermez les yeux et expirez tout l'air de vos poumons. Touchez votre palais du bout de la langue, juste derrière les incisives, et conservez cette position pendant l'exercice`,\r\n                                                        },\r\n                                                    ],\r\n                                                },\r\n                                                {\r\n                                                    title: 'le saviez-vous ?',\r\n                                                    subcontent: `Cet exercice permet de diminuer le stress, et peut également vous aider à vous endormir. Idéalement, mettez-vous assis le dos bien droit, les pieds à plat au sol. Vous pouvez également pratiquer cet exercice debout, ou couché dans votre lit.`,\r\n                                                },\r\n                                            ]}\r\n                                        />\r\n                                    </aside>\r\n                                ),\r\n                            },\r\n                            {\r\n                                title: 'Jouer',\r\n                                subcontent: (\r\n                                    <section>\r\n                                        <Modal\r\n                                            title=\"Partie terminée\"\r\n                                            isModal={isModal}\r\n                                            isOverlay={true}\r\n                                            onCloseBtnClick={() => {\r\n                                                setCountdownOverlaySeconds(0);\r\n                                            }}>\r\n                                            <span className=\"_text-white\">\r\n                                                {changeDataCountdown === false\r\n                                                    ? 'Début dans :'\r\n                                                    : 'Reprise dans :'}\r\n                                            </span>\r\n                                            <span className=\"_text-xxl _text-white _py-sm\">\r\n                                                {countdownOverlaySeconds}\r\n                                            </span>\r\n                                            <div\r\n                                                className=\"_w-4/5 _bg-white _rounded-small _border-solid _border-2 _p-sm _border-white _flex\"\r\n                                                style={{\r\n                                                    backgroundColor:\r\n                                                        'rgba(255,255,255,.3)',\r\n                                                }}>\r\n                                                <div className=\"_mr-xs\">\r\n                                                    <InfoSvg\r\n                                                        fillColor=\"#fff\"\r\n                                                        svgWidth=\"20px\"\r\n                                                        svgHeight=\"20px\"></InfoSvg>\r\n                                                </div>\r\n                                                <span className=\"_text-white\">\r\n                                                    Essayez de respirer par le\r\n                                                    ventre pendant cet exercice\r\n                                                </span>\r\n                                            </div>\r\n                                        </Modal>\r\n                                        <section className=\"_w-full _flex _justify-center _items-center\">\r\n                                            <div className=\"_flex _flex-col\">\r\n                                                {play !== null && (\r\n                                                    <span\r\n                                                        className=\"_text-center _text-xl _text-white _w-full\"\r\n                                                        role=\"status\"\r\n                                                        aria-live=\"polite\">\r\n                                                        {\r\n                                                            chronoStep.stepName[\r\n                                                                step\r\n                                                            ]\r\n                                                        }\r\n                                                    </span>\r\n                                                )}\r\n                                                <div className=\"c-chrono-player _relative _flex _justify-center _items-center\">\r\n                                                    <CircleGrow\r\n                                                        isPlaying={play}\r\n                                                        playingStep={step}\r\n                                                        borderColor={\r\n                                                            chronoStep\r\n                                                                .stepColor[step]\r\n                                                        }\r\n                                                        playingState={\r\n                                                            animationState\r\n                                                        }></CircleGrow>\r\n                                                    {play === null && (\r\n                                                        <span\r\n                                                            className=\"_text-lg _text-primary _p-xs _text-center _z-10\"\r\n                                                            role=\"status\"\r\n                                                            aria-live=\"polite\">\r\n                                                            Cliquez sur lecture\r\n                                                            pour commencer\r\n                                                        </span>\r\n                                                    )}\r\n                                                    {play !== null && (\r\n                                                        <span className=\"_text-center _text-xxl _text-primary _z-10\">\r\n                                                            {displayCount(\r\n                                                                seconds\r\n                                                            )}\r\n                                                        </span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                        <PlayerControls\r\n                                            play={play}\r\n                                            isPlaying={musicPlaying}\r\n                                            audioFile={'Soul-Colors.mp3'}\r\n                                            onClick={{\r\n                                                reset: () => reset(),\r\n                                                pause: () => {\r\n                                                    setCountdownOverlaySeconds(\r\n                                                        changeDataCountdown\r\n                                                            ? 3\r\n                                                            : 5\r\n                                                    );\r\n                                                    setPlay(!play);\r\n                                                },\r\n                                                audio: () => {\r\n                                                    setResetMusic(false);\r\n                                                    setMusicPlaying(\r\n                                                        !musicPlaying\r\n                                                    );\r\n                                                },\r\n                                            }}\r\n                                        />\r\n                                        <Audio\r\n                                            id=\"audio\"\r\n                                            audioFile={'bip.mp3'}></Audio>\r\n                                    </section>\r\n                                ),\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </Container>\r\n        </BgImage>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { useEffect, useContext } from 'react';\r\nimport { TimerContext } from '../context/TimerContext';\r\nimport TimeFormat from '../utils/TimeFormat';\r\n\r\nexport default function useScoreTimer(\r\n    isPlaying: boolean,\r\n    milliseconds: number = 1000\r\n) {\r\n    const { seconds, setSeconds } = useContext(TimerContext);\r\n\r\n    useEffect(() => {\r\n        let timerInterval: NodeJS.Timeout | undefined = undefined;\r\n\r\n        if (setSeconds) {\r\n            if (isPlaying) {\r\n                timerInterval = setInterval(() => {\r\n                    setSeconds((seconds) => seconds + 1);\r\n                }, milliseconds);\r\n            } else if (!isPlaying && seconds !== 0 && timerInterval) {\r\n                clearInterval(timerInterval);\r\n            }\r\n            return () => {\r\n                if (timerInterval) clearInterval(timerInterval);\r\n            };\r\n        }\r\n        return;\r\n    }, [isPlaying, seconds]);\r\n\r\n    return { seconds: seconds, secondsFormat: TimeFormat(seconds) };\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport default function useAudioPlayer() {\r\n    const [audioPlaying, setAudioPlaying] = useState<boolean>(false);\r\n    const [resetAudio, setResetAudio] = useState<boolean>(false);\r\n\r\n    const [musicPlaying, setMusicPlaying] = useState<boolean>(false);\r\n    const [resetMusic, setResetMusic] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const audio: HTMLMediaElement & any = document.getElementById('audio');\r\n        const music: HTMLMediaElement & any = document.getElementById('music');\r\n\r\n        if (music) {\r\n            musicPlaying ? music.play() : music.pause();\r\n            if (resetMusic) {\r\n                music.pause();\r\n                music.currentTime = 0;\r\n            }\r\n        }\r\n\r\n        if (audio) {\r\n            if (audioPlaying) audio.play();\r\n\r\n            if (resetAudio) {\r\n                audio.pause();\r\n                audio.currentTime = 0;\r\n            }\r\n        }\r\n    }, [audioPlaying, musicPlaying]);\r\n\r\n    return { audioPlaying, setAudioPlaying, setResetAudio, musicPlaying, setMusicPlaying, setResetMusic };\r\n}\r\n","import { useEffect, useContext } from 'react';\r\nimport { CountdownContext } from '../context/CountdownContext';\r\n\r\nexport default function useCountdown(active: boolean) {\r\n    const { countdownOverlaySeconds, setCountdownOverlaySeconds } = useContext(CountdownContext);\r\n    \r\n    useEffect(() => {\r\n        let timerInterval: NodeJS.Timeout | undefined = undefined;\r\n        \r\n        if (setCountdownOverlaySeconds) {\r\n            if (active) {\r\n                timerInterval = setInterval(() => {\r\n                    setCountdownOverlaySeconds(countdownOverlaySeconds - 1)\r\n                }, 1000);\r\n            }\r\n            return () => {\r\n                if (timerInterval) clearInterval(timerInterval);\r\n            };\r\n        }\r\n        return;\r\n    }, [active, countdownOverlaySeconds]);\r\n    \r\n    return { countdownOverlaySeconds };\r\n}","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport Main from './Main';\r\nimport { TimerProvider } from './context/TimerContext';\r\nimport { CountdownProvider } from './context/CountdownContext';\r\n\r\nfunction App() {\r\n    return (\r\n        <CountdownProvider>\r\n            <TimerProvider>\r\n                <Main />\r\n            </TimerProvider>\r\n        </CountdownProvider>\r\n    );\r\n}\r\n\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}